xkb_keymap {
xkb_keycodes { include "evdev+aliases(qwerty)" };
xkb_types { include "complete" };

xkb_compatibility "complete" {

    virtual_modifiers NumLock,Alt,LevelThree,LAlt,RAlt,RControl,LControl,ScrollLock,LevelFive,AltGr,Meta,Super,Hyper;

    interpret.useModMapMods= AnyLevel;
    interpret.repeat= False;
    interpret.locking= False;

    interpret Shift_Lock+AnyOf(Shift+Lock) {
        action= LockMods(modifiers=Shift);
    };
    interpret Num_Lock+AnyOf(all) {
        virtualModifier= NumLock;
        action= LockMods(modifiers=NumLock);
    };

    interpret ISO_Level3_Shift+AnyOf(all) {
        virtualModifier= LevelThree;
        useModMapMods=level1;
        action= SetMods(modifiers=LevelThree,clearLocks);
    };
    interpret ISO_Level3_Latch+AnyOf(all) {
        virtualModifier= LevelThree;
        useModMapMods=level1;
        action= LatchMods(modifiers=LevelThree,clearLocks,latchToLock);
    };
    interpret ISO_Level3_Lock+AnyOf(all) {
        virtualModifier= LevelThree;
        useModMapMods=level1;
        action= LockMods(modifiers=LevelThree);
    };

    interpret ISO_Level3_Shift+AnyOfOrNone(all) {
        action= SetMods(modifiers=LevelThree,clearLocks);
    };
    interpret ISO_Level3_Latch+AnyOfOrNone(all) {
        action= LatchMods(modifiers=LevelThree,clearLocks,latchToLock);
    };
    interpret ISO_Level3_Lock+AnyOfOrNone(all) {
        action= LockMods(modifiers=LevelThree);
    };

    interpret Alt_L+AnyOf(all) {
        virtualModifier= Alt;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Alt_R+AnyOf(all) {
        virtualModifier= Alt;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Meta_L+AnyOf(all) {
        virtualModifier= Meta;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Meta_R+AnyOf(all) {
        virtualModifier= Meta;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Super_L+AnyOf(all) {
        virtualModifier= Super;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Hyper_L+AnyOf(all) {
        virtualModifier= Hyper;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Hyper_R+AnyOf(all) {
        virtualModifier= Hyper;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Scroll_Lock+AnyOf(all) {
        virtualModifier= ScrollLock;
        action= LockMods(modifiers=modMapMods);
    };
    interpret ISO_Level5_Shift+AnyOf(all) {
        virtualModifier= LevelFive;
        useModMapMods=level1;
        action= SetMods(modifiers=LevelFive,clearLocks);
    };
    interpret ISO_Level5_Latch+AnyOf(all) {
        virtualModifier= LevelFive;
        action= LatchMods(modifiers=LevelFive,clearLocks,latchToLock);
    };
    interpret ISO_Level5_Lock+AnyOf(all) {
        virtualModifier= LevelFive;
        action= LockMods(modifiers=LevelFive);
    };
    interpret Pointer_Button_Dflt+AnyOfOrNone(all) {
        action= PtrBtn(button=default);
    };
    interpret Pointer_Button1+AnyOfOrNone(all) {
        action= PtrBtn(button=1);
    };
    interpret Pointer_Button2+AnyOfOrNone(all) {
        action= PtrBtn(button=2);
    };
    interpret Pointer_Button3+AnyOfOrNone(all) {
        action= PtrBtn(button=3);
    };
    interpret Pointer_DblClick_Dflt+AnyOfOrNone(all) {
        action= PtrBtn(button=default,count=2);
    };
    interpret Pointer_DblClick1+AnyOfOrNone(all) {
        action= PtrBtn(button=1,count=2);
    };
    interpret Pointer_DblClick2+AnyOfOrNone(all) {
        action= PtrBtn(button=2,count=2);
    };
    interpret Pointer_DblClick3+AnyOfOrNone(all) {
        action= PtrBtn(button=3,count=2);
    };
    interpret Pointer_Drag_Dflt+AnyOfOrNone(all) {
        action= LockPtrBtn(button=default,affect=both);
    };
    interpret Pointer_Drag1+AnyOfOrNone(all) {
        action= LockPtrBtn(button=1,affect=both);
    };
    interpret Pointer_Drag2+AnyOfOrNone(all) {
        action= LockPtrBtn(button=2,affect=both);
    };
    interpret Pointer_Drag3+AnyOfOrNone(all) {
        action= LockPtrBtn(button=3,affect=both);
    };
    interpret Pointer_EnableKeys+AnyOfOrNone(all) {
        action= LockControls(controls=MouseKeys);
    };
    interpret Pointer_Accelerate+AnyOfOrNone(all) {
        action= LockControls(controls=MouseKeysAccel);
    };
    interpret Pointer_DfltBtnNext+AnyOfOrNone(all) {
        action= SetPtrDflt(affect=button,button=+1);
    };
    interpret Pointer_DfltBtnPrev+AnyOfOrNone(all) {
        action= SetPtrDflt(affect=button,button=-1);
    };
    interpret AccessX_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=AccessXKeys);
    };
    interpret AccessX_Feedback_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=AccessXFeedback);
    };
    interpret RepeatKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=RepeatKeys);
    };
    interpret SlowKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=SlowKeys);
    };
    interpret BounceKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=BounceKeys);
    };
    interpret StickyKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=StickyKeys);
    };
    interpret MouseKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=MouseKeys);
    };
    interpret MouseKeys_Accel_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=MouseKeysAccel);
    };
    interpret Overlay1_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=Overlay1);
    };
    interpret Overlay2_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=Overlay2);
    };
    interpret AudibleBell_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=AudibleBell);
    };
    interpret Terminate_Server+AnyOfOrNone(all) {
        action= Terminate();
    };
    interpret Alt_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Alt,clearLocks);
    };
    interpret Alt_R+AnyOfOrNone(all) {
        action= SetMods(modifiers=Alt,clearLocks);
    };
    interpret Meta_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Meta,clearLocks);
    };
    interpret Meta_R+AnyOfOrNone(all) {
        action= SetMods(modifiers=Meta,clearLocks);
    };
    interpret Super_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Super,clearLocks);
    };
    interpret Hyper_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Hyper,clearLocks);
    };
    interpret Hyper_R+AnyOfOrNone(all) {
        action= SetMods(modifiers=Hyper,clearLocks);
    };
    interpret Shift_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Shift,clearLocks);
    };
    interpret XF86Switch_VT_1+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=1,!same);
    };
    interpret XF86Switch_VT_2+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=2,!same);
    };
    interpret XF86Switch_VT_3+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=3,!same);
    };
    interpret XF86Switch_VT_4+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=4,!same);
    };
    interpret XF86Switch_VT_5+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=5,!same);
    };
    interpret XF86Switch_VT_6+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=6,!same);
    };
    interpret XF86Switch_VT_7+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=7,!same);
    };
    interpret XF86Switch_VT_8+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=8,!same);
    };
    interpret XF86Switch_VT_9+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=9,!same);
    };
    interpret XF86Switch_VT_10+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=10,!same);
    };
    interpret XF86Switch_VT_11+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=11,!same);
    };
    interpret XF86Switch_VT_12+AnyOfOrNone(all) {
        repeat= True;
        action= SwitchScreen(screen=12,!same);
    };
    interpret XF86LogGrabInfo+AnyOfOrNone(all) {
        repeat= True;
        action= Private(type=0x86,data[0]=0x50,data[1]=0x72,data[2]=0x47,data[3]=0x72,data[4]=0x62,data[5]=0x73,data[6]=0x00);
    };
    interpret XF86LogWindowTree+AnyOfOrNone(all) {
        repeat= True;
        action= Private(type=0x86,data[0]=0x50,data[1]=0x72,data[2]=0x57,data[3]=0x69,data[4]=0x6e,data[5]=0x73,data[6]=0x00);
    };
    interpret XF86Next_VMode+AnyOfOrNone(all) {
        repeat= True;
        action= Private(type=0x86,data[0]=0x2b,data[1]=0x56,data[2]=0x4d,data[3]=0x6f,data[4]=0x64,data[5]=0x65,data[6]=0x00);
    };
    interpret XF86Prev_VMode+AnyOfOrNone(all) {
        repeat= True;
        action= Private(type=0x86,data[0]=0x2d,data[1]=0x56,data[2]=0x4d,data[3]=0x6f,data[4]=0x64,data[5]=0x65,data[6]=0x00);
    };
    interpret ISO_Level5_Shift+AnyOfOrNone(all) {
        action= SetMods(modifiers=LevelFive,clearLocks);
    };
    interpret ISO_Level5_Latch+AnyOfOrNone(all) {
        action= LatchMods(modifiers=LevelFive,clearLocks,latchToLock);
    };
    interpret ISO_Level5_Lock+AnyOfOrNone(all) {
        action= LockMods(modifiers=LevelFive);
    };
    interpret Caps_Lock+AnyOfOrNone(all) {
        action= LockMods(modifiers=Lock);
    };
    interpret Any+Exactly(Lock) {
        action= LockMods(modifiers=Lock);
    };
    interpret Any+AnyOf(all) {
        action= SetMods(modifiers=modMapMods,clearLocks);
    };

    interpret Mode_switch+AnyOfOrNone(all) {
        virtualModifier=AltGr;
        useModMapMods=level1;
        action= SetGroup(group=2);
    };
    interpret Super_R+AnyOfOrNone(all) {
        virtualModifier=Super;
        useModMapMods=level1;
        action= SetGroup(group=3);
    };

    interpret ISO_Next_Group+AnyOfOrNone(all) {
        virtualModifier= AltGr;
        useModMapMods=level1;
        action= LockGroup(group=+1);
    };
    interpret ISO_Prev_Group+AnyOfOrNone(all) {
        virtualModifier= AltGr;
        useModMapMods=level1;
        action= LockGroup(group=-1);
    };
    interpret ISO_First_Group+AnyOfOrNone(all) {
        action= LockGroup(group=1);
    };
    interpret ISO_Last_Group+AnyOfOrNone(all) {
        action= LockGroup(group=2);
    };

    //group 2 = AltGr;
	//group 3 = Super;

    indicator "Caps Lock" {
        !allowExplicit;
        whichModState= locked;
        modifiers= Lock;
    };
    indicator "Num Lock" {
        !allowExplicit;
        whichModState= locked;
        modifiers= NumLock;
    };
    indicator "Scroll Lock" {
        whichModState= locked;
        modifiers= ScrollLock;
    };
    indicator "Shift Lock" {
        !allowExplicit;
        whichModState= locked;
        modifiers= Shift;
    };
    indicator "Group 2" {
        !allowExplicit;
        groups= 0xfe;
    };
    indicator "Mouse Keys" {
        indicatorDrivesKeyboard;
        controls= mouseKeys;
    };
};


// 1234567890σ\
// qwfpgjluyøåæ
// arstdhneio'
// /zxcvbkm,.-



xkb_symbols "pc+no+inet(evdev)"
{
	//type[group1]="FOUR_LEVEL";

    name[group1]="Norwegian";
	key.type="FOUR_LEVEL";

key <TLDE> { [guillemotleft,guillemotright,a   ,NoSymbol ], [plusminus     ,a             ], [a           ,a           ] };

key <AE01> { [1   ,a ,onesuperior  ,U2081    ], [nabla         ,a             ], [U0001F60A   ,U0001F61E   ] };
key <AE02> { [2   ,a ,twosuperior  ,U2082    ], [therefore     ,U2235         ], [U0001F604   ,U0001F62D   ] };
key <AE03> { [3   ,a ,threesuperior,U2083    ], [EuroSign      ,sterling      ], [U0001F607   ,U0001F608   ] };
key <AE04> { [4   ,e     ,U2074    ,U2084    ], [variation     ,a             ], [U0001F609   ,U0001F61F   ] };
key <AE05> { [5   ,a     ,U2075    ,U2085    ], [a             ,a             ], [U0001F60E   ,U0001F616   ] };
key <AE06> { [6   ,U221E ,U2076    ,U2086    ], [a             ,a             ], [a           ,a           ] };
key <AE07> { [7   ,U27E8 ,U2077    ,U2087    ], [U27EA     ,a             ], [a           ,a           ] };
key <AE08> { [8   ,U27E6 ,U2078    ,U2088    ], [U2985     ,a             ], [a           ,a           ] };
key <AE09> { [9   ,U27E7 ,U2079    ,U2089    ], [U2986     ,a             ], [a           ,a           ] };
key <AE10> { [0   ,U27E9 ,U2070    ,U2080    ], [U27EB     ,a             ], [a           ,a           ] };

key <AE11> { [U2211    ,U220E    ,U22C2    ,U22C3    ], [U220F         ,U2210         ], [U22C1       ,U22C2       ] };
key <AE12> { [a        ,a        ,a        ,NoSymbol ], [a             ,a             ], [a           ,a           ] };

key <AD01> { [q        ,Q        ,a        ,U211A    ], [question      ,questiondown  ], [a           ,a           ] };
key <AD02> { [w        ,W        ,a        ,U0001D54E], [exclam        ,exclamdown    ], [Greek_omega ,Greek_OMEGA ] };
key <AD03> { [f        ,F        ,U222B    ,U0001D53D], [dollar        ,function      ], [Greek_phi   ,Greek_PHI   ] };
key <AD04> { [p        ,P        ,U2295    ,U2119    ], [plus          ,a             ], [Greek_pi    ,Greek_PI    ] };
key <AD05> { [g        ,G        ,a        ,U0001D53E], [ampersand     ,a             ], [Greek_gamma ,Greek_GAMMA ] };
key <AD06> { [j        ,J        ,a        ,U0001D541], [dstroke       ,a             ], [a           ,a           ] };
key <AD07> { [l        ,L        ,a        ,U0001D543], [percent       ,a             ], [Greek_lambda,Greek_LAMBDA] };
key <AD08> { [u        ,U        ,U222A    ,U0001D54C], [underscore    ,a             ], [Greek_upsilon,Greek_UPSILON] };
key <AD09> { [y        ,Y        ,U2261    ,U0001D550], [equal         ,notequal      ], [Greek_psi   ,Greek_PSI   ] };
key <AD10> { [oslash   ,Oslash   ,U2205    ,NoSymbol ], [U2248         ,U2249         ], [Greek_theta ,Greek_THETA ] };
key <AD11> { [aring    ,Aring    ,a        ,NoSymbol ], [dead_abovering,a             ], [a           ,a           ] };
key <AD12> { [ae       ,AE       ,a        ,NoSymbol ], [radical       ,a             ], [Greek_eta   ,Greek_ETA   ] };

key <AC01> { [a        ,A        ,U2200    ,U0001D538], [at            ,U2135         ], [Greek_alpha ,Greek_ALPHA ] };
key <AC02> { [r        ,R        ,a        ,U211D    ], [braceleft     ,leftopentriangle   ], [Greek_rho   ,Greek_RHO   ] };
key <AC03> { [s        ,S        ,a        ,U0001D54A], [bracketleft   ,includedin    ], [Greek_sigma ,Greek_SIGMA ] };
key <AC04> { [t        ,T        ,a        ,U0001D54B], [parenleft     ,U2286         ], [Greek_tau   ,Greek_TAU   ] };
key <AC05> { [d        ,D        ,U2206    ,U0001D53B], [less          ,lessthanequal ], [Greek_delta ,Greek_DELTA ] };
key <AC06> { [h        ,H        ,U2207    ,U210D    ], [greater       ,greaterthanequal], [a           ,a           ] };
key <AC07> { [n        ,N        ,U2209    ,U2115    ], [parenright    ,U2287         ], [Greek_nu    ,Greek_NU    ] };
key <AC08> { [e        ,E        ,U2203    ,U0001D53C], [bracketright  ,includes      ], [Greek_epsilon,Greek_EPSILON] };
key <AC09> { [i        ,I        ,U2229    ,U0001D540], [braceright    ,rightopentriangle], [Greek_iota  ,Greek_IOTA  ] };
key <AC10> { [o        ,O        ,a        ,U0001D546], [dead_tilde    ,a             ], [Greek_omicron,Greek_OMICRON] };
key <AC11> { [apostrophe,quotedbl ,a       ,NoSymbol ], [approximate   ,similarequal  ], [U2191       ,U21D1       ] };
key <BKSL> { [dead_diaeresis,dead_acute,a  ,NoSymbol ], [dead_grave    ,a             ], [U2194        ,U21D4 ] };

key <LSGT> { [slash    ,bar      ,U2223    ,U2225    ], [backslash     ,a             ], [a           ,a           ] };
key <AB01> { [z        ,Z        ,a        ,U2124    ], [division      ,a             ], [Greek_zeta  ,Greek_ZETA  ] };
key <AB02> { [x        ,X        ,U2297    ,U0001D54F], [multiply      ,a             ], [Greek_xi    ,Greek_XI    ] };
key <AB03> { [c        ,C        ,U2218    ,U2102    ], [dead_circumflex,a      ], [Greek_chi   ,Greek_CHI   ] };
key <AB04> { [v        ,V        ,a        ,U0001D54D], [logicalor     ,logicaland    ], [a           ,a           ] };
key <AB05> { [b        ,B        ,a        ,U0001D539], [numbersign    ,a             ], [Greek_beta  ,Greek_BETA  ] };
key <AB06> { [k        ,K        ,a        ,U0001D542], [a             ,a             ], [Greek_kappa ,Greek_KAPPA ] };
key <AB07> { [m        ,M        ,U2208    ,U0001D544], [asterisk      ,a             ], [Greek_mu    ,Greek_MU    ] };
key <AB08> { [comma    ,semicolon,a        ,NoSymbol ], [dead_cedilla  ,seconds       ], [U2190       ,U21D0       ] };
key <AB09> { [period   ,colon    ,U2299    ,NoSymbol ], [U22C5         ,a             ], [U2192       ,U21D2       ] };
key <AB10> { [minus    ,ellipsis ,U2296    ,NoSymbol ], [emdash        ,a             ], [U2193       ,U21D3       ] };



key <SPCE> { [space           ,space           ,NoSymbol        ,NoSymbol        ], [space           ,nobreakspace    ] };

key <LEFT> { type="ONE_LEVEL",         [Left            ] };
key <RGHT> { type="ONE_LEVEL",         [Right           ] };
key   <UP> { type="ONE_LEVEL",         [Up              ] };
key <DOWN> { type="ONE_LEVEL",         [Down            ] };

key  <ESC> { type="ONE_LEVEL",         [Escape          ] };
key <RTSH> { type="ONE_LEVEL",         [Shift_R         ] };
key <LALT> { type="TWO_LEVEL",         [Alt_L           ,Meta_L          ] };
key <BKSP> { type="ONE_LEVEL",         [Caps_Lock       ] };
key  <TAB> { type="ONE_LEVEL",         [Tab             ] };
key <RTRN> { type="ONE_LEVEL",         [Return          ] };
key <LCTL> { type="ONE_LEVEL",         [Control_L       ] };
key <LFSH> { type="ONE_LEVEL",         [Shift_L         ] };
key <CAPS> { type="TWO_LEVEL",         [BackSpace       ,BackSpace       ] };
key <NMLK> { type="ONE_LEVEL",         [Num_Lock        ] };
key <SCLK> { type="ONE_LEVEL",         [Scroll_Lock     ] };

key <FK01> { type="CTRL+ALT",          [F1              ,F1              ,F1              ,F1              ,XF86Switch_VT_1 ] };
key <FK02> { type="CTRL+ALT",          [F2              ,F2              ,F2              ,F2              ,XF86Switch_VT_2 ] };
key <FK03> { type="CTRL+ALT",          [F3              ,F3              ,F3              ,F3              ,XF86Switch_VT_3 ] };
key <FK04> { type="CTRL+ALT",          [F4              ,F4              ,F4              ,F4              ,XF86Switch_VT_4 ] };
key <FK05> { type="CTRL+ALT",          [F5              ,F5              ,F5              ,F5              ,XF86Switch_VT_5 ] };
key <FK06> { type="CTRL+ALT",          [F6              ,F6              ,F6              ,F6              ,XF86Switch_VT_6 ] };
key <FK07> { type="CTRL+ALT",          [F7              ,F7              ,F7              ,F7              ,XF86Switch_VT_7 ] };
key <FK08> { type="CTRL+ALT",          [F8              ,F8              ,F8              ,F8              ,XF86Switch_VT_8 ] };
key <FK09> { type="CTRL+ALT",          [F9              ,F9              ,F9              ,F9              ,XF86Switch_VT_9 ] };
key <FK10> { type="CTRL+ALT",          [F10             ,F10             ,F10             ,F10             ,XF86Switch_VT_10] };
key <FK11> { type="CTRL+ALT",          [F11             ,F11             ,F11             ,F11             ,XF86Switch_VT_11] };
key <FK12> { type="CTRL+ALT",          [F12             ,F12             ,F12             ,F12             ,XF86Switch_VT_12] };

key <VOL-> { type="ONE_LEVEL",         [XF86AudioLowerVolume] };
key <VOL+> { type="ONE_LEVEL",         [XF86AudioRaiseVolume] };

key <KPDV> { type="CTRL+ALT",          [KP_Divide       ,U2215           ,0x10000f7       ,VoidSymbol      ,XF86Ungrab      ] };
key <KPMU> { type="CTRL+ALT",          [KP_Multiply     ,NoSymbol        ,NoSymbol        ,NoSymbol        ,NoSymbol        ] };
key  <KP7> { type="TWO_LEVEL",         [KP_Home         ,KP_7            ] };
key  <KP8> { type="TWO_LEVEL",         [KP_Up           ,KP_8            ] };
key  <KP9> { type="TWO_LEVEL",         [KP_Prior        ,KP_9            ] };
key <KPSU> { type="CTRL+ALT",          [KP_Subtract     ,U2212           ,U2212           ,VoidSymbol      ,XF86Prev_VMode  ] };
key  <KP4> { type="TWO_LEVEL",         [KP_Left         ,KP_4            ] };
key  <KP5> { type="TWO_LEVEL",         [KP_Begin        ,KP_5            ] };
key  <KP6> { type="TWO_LEVEL",         [KP_Right        ,KP_6            ] };
key <KPAD> { type="CTRL+ALT",          [KP_Add          ,0x100002b       ,0x100002b       ,VoidSymbol      ,XF86Next_VMode  ] };
key  <KP1> { type="TWO_LEVEL",         [KP_End          ,KP_1            ] };
key  <KP2> { type="TWO_LEVEL",         [KP_Down         ,KP_2            ] };
key  <KP3> { type="TWO_LEVEL",         [KP_Next         ,KP_3            ] };
key  <KP0> { type="TWO_LEVEL",         [KP_Insert       ,KP_0            ] };
key <KPDL> { type="KEYPAD",            [KP_Delete       ,KP_Separator    ] };
key <LVL3> { type="ONE_LEVEL",         [ISO_Level3_Shift] };
key <COMP> { type="ONE_LEVEL",         [Super_R         ] };
key <LWIN> { type="ONE_LEVEL",         [Super_L         ] };
key <RWIN> { type="ONE_LEVEL",         [ISO_Level3_Shift] };
key <KATA> { type="ONE_LEVEL",         [Katakana        ] };
key <HIRA> { type="ONE_LEVEL",         [Hiragana        ] };
key <HENK> { type="ONE_LEVEL",         [Henkan_Mode     ] };
key <HKTG> { type="ONE_LEVEL",         [Hiragana_Katakana] };
key <MUHE> { type="ONE_LEVEL",         [Muhenkan        ] };
key <KPEN> { type="ONE_LEVEL",         [KP_Enter        ] };
key <RCTL> { type="ONE_LEVEL",         [Control_R       ] };
key <PRSC> { type="PC_ALT_LEVEL2",     [Print           ,Sys_Req         ] };
key <RALT> { type="ONE_LEVEL",         [Mode_switch     ] };
key <LNFD> { type="ONE_LEVEL",         [Linefeed        ] };
key <HOME> { type="ONE_LEVEL",         [Home            ] };
key <PGUP> { type="ONE_LEVEL",         [Prior           ] };
key  <END> { type="ONE_LEVEL",         [End             ] };
key <PGDN> { type="ONE_LEVEL",         [Next            ] };
key  <INS> { type="ONE_LEVEL",         [Insert          ] };
key <DELE> { type="ONE_LEVEL",         [Delete          ] };
key <MUTE> { type="ONE_LEVEL",         [XF86AudioMute   ] };
key <POWR> { type="ONE_LEVEL",         [XF86PowerOff    ] };
key <KPEQ> { type="ONE_LEVEL",         [KP_Equal        ] };
key <I126> { type="ONE_LEVEL",         [plusminus       ] };
key <PAUS> { type="PC_CONTROL_LEVEL2", [Pause           ,Break           ] };
key <I128> { type="ONE_LEVEL",         [XF86LaunchA     ] };
key <I129> { type="TWO_LEVEL",         [KP_Decimal      ,KP_Decimal      ] };
key <HNGL> { type="ONE_LEVEL",         [Hangul          ] };
key <HJCV> { type="ONE_LEVEL",         [Hangul_Hanja    ] };
key <STOP> { type="ONE_LEVEL",         [Cancel          ] };
key <AGAI> { type="ONE_LEVEL",         [Redo            ] };
key <PROP> { type="ONE_LEVEL",         [SunProps        ] };
key <UNDO> { type="ONE_LEVEL",         [Undo            ] };
key <FRNT> { type="ONE_LEVEL",         [SunFront        ] };
key <COPY> { type="ONE_LEVEL",         [XF86Copy        ] };
key <OPEN> { type="ONE_LEVEL",         [SunOpen         ] };
key <PAST> { type="ONE_LEVEL",         [XF86Paste       ] };
key <FIND> { type="ONE_LEVEL",         [Find            ] };
key  <CUT> { type="ONE_LEVEL",         [XF86Cut         ] };
key <HELP> { type="ONE_LEVEL",         [Help            ] };
key <I147> { type="ONE_LEVEL",         [XF86MenuKB      ] };
key <I148> { type="ONE_LEVEL",         [XF86Calculator  ] };
key <I150> { type="ONE_LEVEL",         [XF86Sleep       ] };
key <I151> { type="ONE_LEVEL",         [XF86WakeUp      ] };
key <I152> { type="ONE_LEVEL",         [XF86Explorer    ] };
key <I153> { type="ONE_LEVEL",         [XF86Send        ] };
key <I155> { type="ONE_LEVEL",         [XF86Xfer        ] };
key <I156> { type="ONE_LEVEL",         [XF86Launch1     ] };
key <I157> { type="ONE_LEVEL",         [XF86Launch2     ] };
key <I158> { type="ONE_LEVEL",         [XF86WWW         ] };
key <I159> { type="ONE_LEVEL",         [XF86DOS         ] };
key <I160> { type="ONE_LEVEL",         [XF86ScreenSaver ] };
key <I162> { type="ONE_LEVEL",         [XF86RotateWindows] };
key <I163> { type="ONE_LEVEL",         [XF86Mail        ] };
key <I164> { type="ONE_LEVEL",         [XF86Favorites   ] };
key <I165> { type="ONE_LEVEL",         [XF86MyComputer  ] };
key <I166> { type="ONE_LEVEL",         [XF86Back        ] };
key <I167> { type="ONE_LEVEL",         [XF86Forward     ] };
key <I169> { type="ONE_LEVEL",         [XF86Eject       ] };
key <I170> { type="TWO_LEVEL",         [XF86Eject       ,XF86Eject       ] };
key <I171> { type="ONE_LEVEL",         [XF86AudioNext   ] };
key <I172> { type="TWO_LEVEL",         [XF86AudioPlay   ,XF86AudioPause  ] };
key <I173> { type="ONE_LEVEL",         [XF86AudioPrev   ] };
key <I174> { type="TWO_LEVEL",         [XF86AudioStop   ,XF86Eject       ] };
key <I175> { type="ONE_LEVEL",         [XF86AudioRecord ] };
key <I176> { type="ONE_LEVEL",         [XF86AudioRewind ] };
key <I177> { type="ONE_LEVEL",         [XF86Phone       ] };
key <I179> { type="ONE_LEVEL",         [XF86Tools       ] };
key <I180> { type="ONE_LEVEL",         [XF86HomePage    ] };
key <I181> { type="ONE_LEVEL",         [XF86Reload      ] };
key <I182> { type="ONE_LEVEL",         [XF86Close       ] };
key <I185> { type="ONE_LEVEL",         [XF86ScrollUp    ] };
key <I186> { type="ONE_LEVEL",         [XF86ScrollDown  ] };
key <I187> { type="ONE_LEVEL",         [parenleft       ] };
key <I188> { type="ONE_LEVEL",         [parenright      ] };
key <I189> { type="ONE_LEVEL",         [XF86New         ] };
key <I190> { type="ONE_LEVEL",         [Redo            ] };
key <FK13> { type="ONE_LEVEL",         [XF86Tools       ] };
key <FK14> { type="ONE_LEVEL",         [XF86Launch5     ] };
key <FK15> { type="ONE_LEVEL",         [XF86Launch6     ] };
key <FK16> { type="ONE_LEVEL",         [XF86Launch7     ] };
key <FK17> { type="ONE_LEVEL",         [XF86Launch8     ] };
key <FK18> { type="ONE_LEVEL",         [XF86Launch9     ] };
key <FK21> { type="ONE_LEVEL",         [XF86TouchpadToggle] };
key <FK22> { type="ONE_LEVEL",         [XF86TouchpadOn  ] };
key <FK23> { type="ONE_LEVEL",         [XF86TouchpadOff ] };
key <MDSW> { type="ONE_LEVEL",         [Mode_switch     ] };
key  <ALT> { type="TWO_LEVEL",         [NoSymbol        ,Alt_L           ] };
key <META> { type="TWO_LEVEL",         [NoSymbol        ,Meta_L          ] };
key <SUPR> { type="TWO_LEVEL",         [NoSymbol        ,Super_L         ] };
key <HYPR> { type="TWO_LEVEL",         [NoSymbol        ,Hyper_L         ] };
key <I208> { type="ONE_LEVEL",         [XF86AudioPlay   ] };
key <I209> { type="ONE_LEVEL",         [XF86AudioPause  ] };
key <I210> { type="ONE_LEVEL",         [XF86Launch3     ] };
key <I211> { type="ONE_LEVEL",         [XF86Launch4     ] };
key <I212> { type="ONE_LEVEL",         [XF86LaunchB     ] };
key <I213> { type="ONE_LEVEL",         [XF86Suspend     ] };
key <I214> { type="ONE_LEVEL",         [XF86Close       ] };
key <I215> { type="ONE_LEVEL",         [XF86AudioPlay   ] };
key <I216> { type="ONE_LEVEL",         [XF86AudioForward] };
key <I218> { type="ONE_LEVEL",         [Print           ] };
key <I220> { type="ONE_LEVEL",         [XF86WebCam      ] };
key <I223> { type="ONE_LEVEL",         [XF86Mail        ] };
key <I224> { type="ONE_LEVEL",         [XF86Messenger   ] };
key <I225> { type="ONE_LEVEL",         [XF86Search      ] };
key <I226> { type="ONE_LEVEL",         [XF86Go          ] };
key <I227> { type="ONE_LEVEL",         [XF86Finance     ] };
key <I228> { type="ONE_LEVEL",         [XF86Game        ] };
key <I229> { type="ONE_LEVEL",         [XF86Shop        ] };
key <I231> { type="ONE_LEVEL",         [Cancel          ] };
key <I232> { type="ONE_LEVEL",         [XF86MonBrightnessDown] };
key <I233> { type="ONE_LEVEL",         [XF86MonBrightnessUp] };
key <I234> { type="ONE_LEVEL",         [XF86AudioMedia  ] };
key <I235> { type="ONE_LEVEL",         [XF86Display     ] };
key <I236> { type="ONE_LEVEL",         [XF86KbdLightOnOff] };
key <I237> { type="ONE_LEVEL",         [XF86KbdBrightnessDown] };
key <I238> { type="ONE_LEVEL",         [XF86KbdBrightnessUp] };
key <I239> { type="ONE_LEVEL",         [XF86Send        ] };
key <I240> { type="ONE_LEVEL",         [XF86Reply       ] };
key <I241> { type="ONE_LEVEL",         [XF86MailForward ] };
key <I242> { type="ONE_LEVEL",         [XF86Save        ] };
key <I243> { type="ONE_LEVEL",         [XF86Documents   ] };
key <I244> { type="ONE_LEVEL",         [XF86Battery     ] };
key <I245> { type="ONE_LEVEL",         [XF86Bluetooth   ] };
key <I246> { type="ONE_LEVEL",         [XF86WLAN        ] };


    modifier_map Control { <LCTL> };
    modifier_map Shift { <LFSH> };
    modifier_map Shift { <RTSH> };
    modifier_map Mod1 { <LALT> };
    modifier_map Mod2 { <NMLK> };
    modifier_map Mod5 { <LVL3> };
    modifier_map Control { <RCTL> };
    modifier_map Mod4 { <LWIN> };
    //modifier_map Mod4 { <RWIN> };
    modifier_map Mod5 { <MDSW> };
    modifier_map Mod1 { <ALT> };
    modifier_map Mod1 { <META> };
    modifier_map Mod4 { <SUPR> };
    modifier_map Mod4 { <HYPR> };
};

xkb_geometry { include "pc(pc105)" };

};
